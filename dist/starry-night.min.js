class Star{constructor(t){const i=Math.floor(Math.random()*Star.types),o=Math.floor(Math.random()*Star.colors);this.imgColor=Star.spriteReplacements[o],this.x=Math.random(),void 0===t?(this.toBeReplaced=!0,this.y=Math.random()):(this.y=t+Math.random()*Star.stopRenderingThreshold-Star.stopRenderingThreshold/2,this.toBeReplaced=!1),this.z=1+5*Math.random(),this.spriteX=i*Star.imgSize,this.spriteY=o*Star.imgSize,this.brightness=0,this.noiseX=10*Math.random(),this.noiseSpeed=.01+.035*Math.random(),this.displayDimensions=Star.imgSize/this.z}show(t,i){this.y<-10||this.y+10>windowHeight||(this.displayDimensions>=Star.imageThreshold?(tint(255,this.brightness),image(Star.sprite,this.x*t,this.y*i,this.displayDimensions,this.displayDimensions,this.spriteX,this.spriteY,Star.imgSize,Star.imgSize)):(fill(this.imgColor[0],this.imgColor[1],this.imgColor[2],this.brightness),noStroke(),this.displayDimensions>=Star.ellipseThreshold?ellipse(this.x*t,this.y*i,this.displayDimensions,this.displayDimensions):this.displayDimensions>=Star.rectangleThreshold?rect(this.x*t,this.y*i,this.displayDimensions,this.displayDimensions):(stroke(this.imgColor[0],this.imgColor[1],this.imgColor[2],this.brightness),point(this.x*t,this.y*i))))}update(){this.noiseX+=this.noiseSpeed,this.brightness=255*noise(this.noiseX)}updatePositionPostScroll(t){this.y-=t*Star.parallaxMultiplier/this.z,this.toBeReplaced&&(this.y<Star.SCREEN_TOP?(Star.DEBUG&&console.info("adding new star at bottom"),Star.population.push(new Star(Star.SCREEN_BOTTOM)),this.toBeReplaced=!1):this.y>Star.SCREEN_BOTTOM&&(Star.DEBUG&&console.info("adding new star at top"),Star.population.push(new Star(Star.SCREEN_TOP)),this.toBeReplaced=!1))}}let canvas,documentScrollPosition;function preload(){Star.sprite=loadImage(Star.spritePath)}function setup(){(canvas=createCanvas(windowWidth,windowHeight)).elt.style.zIndex="-1",canvas.elt.style.position="fixed",canvas.elt.style.left="0",canvas.elt.style.top="0",ellipseMode(CORNER),Star.sprite.loadPixels(),Star.types=Math.floor(Star.sprite.width/Star.imgSize),Star.colors=Math.floor(Star.sprite.height/Star.imgSize),Star.populationSize=windowWidth*windowHeight/14e3;for(let t=0;t<Star.populationSize;t++)Star.population.push(new Star);documentScrollPosition=getScrollPosition(),window.onscroll=handleStarryNightScroll,frameRate(35)}function draw(){const t=windowWidth,i=windowHeight;background(Star.bgColor[0],Star.bgColor[1],Star.bgColor[2]);for(let o=0;o<Star.population.length;o++)Star.population[o].update(),Star.population[o].show(t,i);Star.DEBUG&&(fill(255),textSize(32),text(Math.round(frameRate()),10,50))}function windowResized(){resizeCanvas(windowWidth,windowHeight)}function getScrollPosition(){return document.documentElement.scrollTop||document.body.scrollTop}function handleStarryNightScroll(){const t=getScrollPosition(),i=(t-documentScrollPosition)/windowHeight;for(let t=0;t<Star.population.length;t++)Star.population[t].updatePositionPostScroll(i);documentScrollPosition=t}Star.imgSize=12,Star.imageThreshold=4.5,Star.ellipseThreshold=2.2,Star.rectangleThreshold=1.5,Star.stopRenderingThreshold=.02,Star.spritePath="stars-sprite-"+Star.imgSize+".png",Star.sprite,Star.types,Star.colors,Star.spriteReplacements=[[232,175,4],[198,125,184],[64,214,51],[74,97,191],[214,164,64],[224,74,4]],Star.bgColor=[22,26,29],Star.parallaxMultiplier=.2,Star.populationSize,Star.population=[],Star.DEBUG=!1,Star.SCREEN_BOTTOM=1+Star.stopRenderingThreshold,Star.SCREEN_TOP=-Star.stopRenderingThreshold;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
